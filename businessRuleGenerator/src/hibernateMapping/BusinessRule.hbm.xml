<?xml version="1.0" encoding="UTF-8"?>

<!-- First step is to configure the DOCTYPE. This is located in: hibernate-release-4.3.4.Final\project\hibernate-core\src\main\resources\org\hibernate\hibernate-mapping-3.0.dtd -->
<!-- Second steps are to simply ctrl+space for "generic" structure -->

<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

	<!-- Class you want to store -->
	<class name="BusinessRule" table="TableName">
	
		<!-- types are hibernate specific, look em up. -->
		<!-- id is the IDENTIFIER tag. -->
		<id name="nameOfAttribute" column="tableAttribute" type="integer" unsaved-value="xxx" > 
		<!-- Unsaved value makes it use either insert or update. If the ID of the set(x) matches the unsaved-value(x) then it becomes a save. If they don't match it becomes an update. -->
		<!-- For super/subclasses use discriminator-value="normal" followed by <discriminator column="type" type="string"></> <property xxx> </> <subclass name="bla" extends="ClassName" discriminator-value="BLA"></> -->
		<!-- The discriminator value will determine what it will put into the column, so for different "types" you could have different values. Example: Games -> Normal, Space, RPG, etc. -->
			<!-- This means you will assign them manually -->
			<generator class="assigned"></generator>
			<!-- <generator class="increment"></generator>  Use this for auto-increment -->
			<!-- <generot class="sequence"></generator> Use this for a sequence: If you want your sequence to be different from 0-1-2-3-4. -->
		</id>
		
		<!-- For other names/columns you can use property -->
		<property name="name" column="tableAttribute" type="string"></property>
		<property name="anotherName" column="tableAttribute" type="string"></property>
		
		<!-- For a List/Collection -->
		<list name="variableListName" table="tableName">
			<!-- specifiy the key column -->
			<key column="foreignKeyAttributeColumnName"></key>
			
			<!-- some kind of IDX column. The index is not unique/primary key for the entire table. It's the indexing for the "set" of items. -->
			<list-index base="0" column="IDXColumnInDatabase"></list-index>
			<!-- Specify the one-to-many class, from where I can insert them -->
			<one-to-many class="WhatClassIsOneToMany"/>
		</list>
	</class>
	
	<class name="Values" table="TableNameValues">
	<id name="attribute" column="columnAttributeName" type="integer">
		<generator class="assigned"></generator>
	</id>
	<property name="remainingAttributes" column="columnAttributeName" type="string"></property>
	</class>

</hibernate-mapping>