/*
* generated by Xtext
*/
grammar InternalRuleDef;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.r00lerz.ruleDef.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.r00lerz.ruleDef.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.r00lerz.ruleDef.services.RuleDefGrammarAccess;

}

@parser::members {

 	private RuleDefGrammarAccess grammarAccess;
 	
    public InternalRuleDefParser(TokenStream input, RuleDefGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BusinessRule";	
   	}
   	
   	@Override
   	protected RuleDefGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBusinessRule
entryRuleBusinessRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBusinessRuleRule()); }
	 iv_ruleBusinessRule=ruleBusinessRule 
	 { $current=$iv_ruleBusinessRule.current; } 
	 EOF 
;

// Rule BusinessRule
ruleBusinessRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBusinessRuleAccess().getColumnvalueColumnValueParserRuleCall_0_0()); 
	    }
		lv_columnvalue_0_0=ruleColumnValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBusinessRuleRule());
	        }
       		set(
       			$current, 
       			"columnvalue",
        		lv_columnvalue_0_0, 
        		"ColumnValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=' ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBusinessRuleAccess().getSpaceKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBusinessRuleAccess().getOperatorOperatorParserRuleCall_2_0()); 
	    }
		lv_operator_2_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBusinessRuleRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=' ' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBusinessRuleAccess().getSpaceKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBusinessRuleAccess().getValueValueParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBusinessRuleRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getValueStaticValueParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleStaticValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"StaticValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getColumnValueParserRuleCall_1()); 
    }
    this_ColumnValue_1=ruleColumnValue
    { 
        $current = $this_ColumnValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleColumnValue
entryRuleColumnValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnValueRule()); }
	 iv_ruleColumnValue=ruleColumnValue 
	 { $current=$iv_ruleColumnValue.current; } 
	 EOF 
;

// Rule ColumnValue
ruleColumnValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getColumnValueAccess().getTablenameTableNameParserRuleCall_0_0()); 
	    }
		lv_tablename_0_0=ruleTableName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnValueRule());
	        }
       		set(
       			$current, 
       			"tablename",
        		lv_tablename_0_0, 
        		"TableName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getColumnValueAccess().getFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnValueAccess().getColumnameColumnNameParserRuleCall_2_0()); 
	    }
		lv_columname_2_0=ruleColumnName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnValueRule());
	        }
       		set(
       			$current, 
       			"columname",
        		lv_columname_2_0, 
        		"ColumnName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleColumnName
entryRuleColumnName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnNameRule()); }
	 iv_ruleColumnName=ruleColumnName 
	 { $current=$iv_ruleColumnName.current; } 
	 EOF 
;

// Rule ColumnName
ruleColumnName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getColumnNameAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleTableName
entryRuleTableName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableNameRule()); }
	 iv_ruleTableName=ruleTableName 
	 { $current=$iv_ruleTableName.current; } 
	 EOF 
;

// Rule TableName
ruleTableName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTableNameAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleStaticValue
entryRuleStaticValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticValueRule()); }
	 iv_ruleStaticValue=ruleStaticValue 
	 { $current=$iv_ruleStaticValue.current; } 
	 EOF 
;

// Rule StaticValue
ruleStaticValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_INT
		{
			newLeafNode(lv_name_0_0, grammarAccess.getStaticValueAccess().getNameINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStaticValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current; } 
	 EOF 
;

// Rule Operator
ruleOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_OperatorName_0_1=	'bigger than' 
    {
        newLeafNode(lv_OperatorName_0_1, grammarAccess.getOperatorAccess().getOperatorNameBiggerThanKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "OperatorName", lv_OperatorName_0_1, null);
	    }

    |		lv_OperatorName_0_2=	'smaller than' 
    {
        newLeafNode(lv_OperatorName_0_2, grammarAccess.getOperatorAccess().getOperatorNameSmallerThanKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "OperatorName", lv_OperatorName_0_2, null);
	    }

)

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


