/*
* generated by Xtext
*/
package com.r00lerz.ruleDef.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RuleDefGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BusinessRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BusinessRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnvalueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnvalueColumnValueParserRuleCall_0_0 = (RuleCall)cColumnvalueAssignment_0.eContents().get(0);
		private final Keyword cSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cSpaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//BusinessRule:
		//	columnvalue=ColumnValue " " operator=Operator " " value=Value;
		public ParserRule getRule() { return rule; }

		//columnvalue=ColumnValue " " operator=Operator " " value=Value
		public Group getGroup() { return cGroup; }

		//columnvalue=ColumnValue
		public Assignment getColumnvalueAssignment_0() { return cColumnvalueAssignment_0; }

		//ColumnValue
		public RuleCall getColumnvalueColumnValueParserRuleCall_0_0() { return cColumnvalueColumnValueParserRuleCall_0_0; }

		//" "
		public Keyword getSpaceKeyword_1() { return cSpaceKeyword_1; }

		//operator=Operator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_2_0() { return cOperatorOperatorParserRuleCall_2_0; }

		//" "
		public Keyword getSpaceKeyword_3() { return cSpaceKeyword_3; }

		//value=Value
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0() { return cValueValueParserRuleCall_4_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueStaticValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final RuleCall cColumnValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	value=StaticValue | ColumnValue;
		public ParserRule getRule() { return rule; }

		//value=StaticValue | ColumnValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=StaticValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//StaticValue
		public RuleCall getValueStaticValueParserRuleCall_0_0() { return cValueStaticValueParserRuleCall_0_0; }

		//ColumnValue
		public RuleCall getColumnValueParserRuleCall_1() { return cColumnValueParserRuleCall_1; }
	}

	public class ColumnValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTablenameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTablenameTableNameParserRuleCall_0_0 = (RuleCall)cTablenameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColumnameColumnNameParserRuleCall_2_0 = (RuleCall)cColumnameAssignment_2.eContents().get(0);
		
		//ColumnValue:
		//	tablename=TableName "." columname=ColumnName;
		public ParserRule getRule() { return rule; }

		//tablename=TableName "." columname=ColumnName
		public Group getGroup() { return cGroup; }

		//tablename=TableName
		public Assignment getTablenameAssignment_0() { return cTablenameAssignment_0; }

		//TableName
		public RuleCall getTablenameTableNameParserRuleCall_0_0() { return cTablenameTableNameParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//columname=ColumnName
		public Assignment getColumnameAssignment_2() { return cColumnameAssignment_2; }

		//ColumnName
		public RuleCall getColumnameColumnNameParserRuleCall_2_0() { return cColumnameColumnNameParserRuleCall_2_0; }
	}

	public class ColumnNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ColumnName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TableName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StaticValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StaticValue:
		//	name=INT;
		public ParserRule getRule() { return rule; }

		//name=INT
		public Assignment getNameAssignment() { return cNameAssignment; }

		//INT
		public RuleCall getNameINTTerminalRuleCall_0() { return cNameINTTerminalRuleCall_0; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Assignment cOperatorNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOperatorNameAlternatives_0 = (Alternatives)cOperatorNameAssignment.eContents().get(0);
		private final Keyword cOperatorNameBiggerThanKeyword_0_0 = (Keyword)cOperatorNameAlternatives_0.eContents().get(0);
		private final Keyword cOperatorNameSmallerThanKeyword_0_1 = (Keyword)cOperatorNameAlternatives_0.eContents().get(1);
		
		//Operator:
		//	OperatorName=("bigger than" | "smaller than");
		public ParserRule getRule() { return rule; }

		//OperatorName=("bigger than" | "smaller than")
		public Assignment getOperatorNameAssignment() { return cOperatorNameAssignment; }

		//"bigger than" | "smaller than"
		public Alternatives getOperatorNameAlternatives_0() { return cOperatorNameAlternatives_0; }

		//"bigger than"
		public Keyword getOperatorNameBiggerThanKeyword_0_0() { return cOperatorNameBiggerThanKeyword_0_0; }

		//"smaller than"
		public Keyword getOperatorNameSmallerThanKeyword_0_1() { return cOperatorNameSmallerThanKeyword_0_1; }
	}
	
	
	private BusinessRuleElements pBusinessRule;
	private ValueElements pValue;
	private ColumnValueElements pColumnValue;
	private ColumnNameElements pColumnName;
	private TableNameElements pTableName;
	private StaticValueElements pStaticValue;
	private OperatorElements pOperator;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RuleDefGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.r00lerz.ruleDef.RuleDef".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BusinessRule:
	//	columnvalue=ColumnValue " " operator=Operator " " value=Value;
	public BusinessRuleElements getBusinessRuleAccess() {
		return (pBusinessRule != null) ? pBusinessRule : (pBusinessRule = new BusinessRuleElements());
	}
	
	public ParserRule getBusinessRuleRule() {
		return getBusinessRuleAccess().getRule();
	}

	//Value:
	//	value=StaticValue | ColumnValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ColumnValue:
	//	tablename=TableName "." columname=ColumnName;
	public ColumnValueElements getColumnValueAccess() {
		return (pColumnValue != null) ? pColumnValue : (pColumnValue = new ColumnValueElements());
	}
	
	public ParserRule getColumnValueRule() {
		return getColumnValueAccess().getRule();
	}

	//ColumnName:
	//	name=ID;
	public ColumnNameElements getColumnNameAccess() {
		return (pColumnName != null) ? pColumnName : (pColumnName = new ColumnNameElements());
	}
	
	public ParserRule getColumnNameRule() {
		return getColumnNameAccess().getRule();
	}

	//TableName:
	//	name=ID;
	public TableNameElements getTableNameAccess() {
		return (pTableName != null) ? pTableName : (pTableName = new TableNameElements());
	}
	
	public ParserRule getTableNameRule() {
		return getTableNameAccess().getRule();
	}

	//StaticValue:
	//	name=INT;
	public StaticValueElements getStaticValueAccess() {
		return (pStaticValue != null) ? pStaticValue : (pStaticValue = new StaticValueElements());
	}
	
	public ParserRule getStaticValueRule() {
		return getStaticValueAccess().getRule();
	}

	//Operator:
	//	OperatorName=("bigger than" | "smaller than");
	public OperatorElements getOperatorAccess() {
		return (pOperator != null) ? pOperator : (pOperator = new OperatorElements());
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
